package edu.columbia.cs.nbtk.task;

import edu.columbia.cs.nbtk.summary.NewsblasterSummary;
import edu.columbia.cs.nbtk.summary.NewsblasterSummaryFactory;
import edu.columbia.cs.nbtk.util.NBConfig;
import edu.columbia.cs.nbtk.util.NewsblasterMapper;
import edu.columbia.cs.nlptk.util.StopWordFilter;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.util.*;

/**
 * Created with IntelliJ IDEA.
 * User: chris
 * Date: 6/21/13
 * Time: 2:08 PM
 *
 * Distills summary files generated by newsblaster into tagged and lemmatized xml files for easier corpus statistics
 * extraction. Preserves distinction of titles and summary text, as well as individual sentences within the generated
 * summary.
 *
 */
public class DistillationGenerator {

    private StanfordCoreNLP pipeline; //POS, NE tokens and Lemmatizations performed by StanfordCoreNLP

    /* XML File creation infrastructure */
    private DocumentBuilderFactory documentBuilderFactory;
    private DocumentBuilder documentBuilder;

    /* Constructor initializes the CoreNLP pipeline -- only do this if you have the ram and time to wait :) */
    public DistillationGenerator() throws ParserConfigurationException {

        /* Initialize StanfordCoreNLP */
        Properties props = new Properties();
        props.put("annotators", "tokenize, ssplit, pos, lemma, ner");
        pipeline = new StanfordCoreNLP(props);

        /* Initialize XML document builders */
        documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilder = documentBuilderFactory.newDocumentBuilder();

    }

    /**
     * Creates a Document object from the Newsblaster today.xml file and a Collection of NewsblasterSummary objects.
     * The resulting Document contains the results of tagging/lemmatizing in XML
     * @param todayXml - a Newsblaster run's today.xml file
     * @param newsblasterSummaries - a Collection of NewsblasterSummary objects
     * @return XML Document with distillation xml
     */
    public Document makeDistillation(File todayXml, Collection<NewsblasterSummary> newsblasterSummaries) {

        /* Construct XML headers/document root element */
        Document document = documentBuilder.newDocument();
        Element root = document.createElement("NewsblasterSummaryDistillation");
        document.appendChild(root);

        Attr origFileAttr = document.createAttribute("original-file");
        origFileAttr.setValue(todayXml.toString());
        root.setAttributeNode(origFileAttr);

        /* Parse and make xml for each summary in the collection */
        for(NewsblasterSummary summary : newsblasterSummaries) {
            makeDistillationXml(summary,root);
        }

        return document; // a finished distillation

    }

    private void makeDistillationXml(NewsblasterSummary summary, Element root) {

        Document document = root.getOwnerDocument();
        Element summaryElement = document.createElement("Summary");
        root.appendChild(summaryElement);

        parseToXml(summary.getTitle(), summaryElement, "Title");

        Element summaryTextElement = document.createElement("Sentences");
        parseToXml(summary.getSummaryText(),summaryTextElement,"Sentence");
        summaryElement.appendChild(summaryTextElement);

    }

    private void parseToXml(String text, Element parentElement, String childElementName) {

        Document document = parentElement.getOwnerDocument();

        Annotation annotation = new Annotation(text);
        pipeline.annotate(annotation);


        for(CoreMap sentence : annotation.get(CoreAnnotations.SentencesAnnotation.class)) {

            Element childElement = document.createElement(childElementName);


            CoreLabel[] taggedWords = new CoreLabel[sentence.get(CoreAnnotations.TokensAnnotation.class).size()];
            sentence.get(CoreAnnotations.TokensAnnotation.class).toArray(taggedWords);

            taggedWords = StopWordFilter.filterCoreLabels(taggedWords);

            for(CoreLabel label : taggedWords) {

                Element wordElement = document.createElement("Word");

                Element lemmaElement = document.createElement("Lemma");
                lemmaElement.setTextContent(label.lemma().toLowerCase());

                Element posElement = document.createElement("Pos");
                posElement.setTextContent(label.tag());

                Element neElement = document.createElement("Ne");
                neElement.setTextContent(label.ner());

                wordElement.appendChild(lemmaElement);
                wordElement.appendChild(posElement);
                wordElement.appendChild(neElement);

                childElement.appendChild(wordElement);

            }

            parentElement.appendChild(childElement);

        }



    }

    public void writeToFile(File distillationFile, Document document)
            throws TransformerConfigurationException, TransformerException {

        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

        System.out.println("Writing disitillation file: "+distillationFile);
        DOMSource source = new DOMSource(document);
        StreamResult result =  new StreamResult(distillationFile);
        transformer.transform(source, result);

    }


    public static void main(String[] args) {

        NBConfig config = NBConfig.getInstance();

        NewsblasterMapper.mapDirectory(new File(config.getProperty("nb.archive.dir")));
        File distillationDirectory = new File(config.getProperty("nb.distillation.dir"));


        DistillationGenerator distillationGenerator = null;

        try {
            distillationGenerator = new DistillationGenerator();

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
            System.exit(-1);
        }


        try {

            NewsblasterSummaryFactory summaryFactory = new NewsblasterSummaryFactory();

            for(File todayXml : NewsblasterMapper.getAllSummaryXml()) {
                System.out.println("Distilling: "+todayXml);

                try {

                    Collection<NewsblasterSummary> summaries = summaryFactory.getSummariesFromTodayXmlFile(todayXml);

                    File distillationFile = new File(distillationDirectory.toString()+File.separator+todayXml.getName());


                    Document distillation = distillationGenerator.makeDistillation(todayXml,summaries);
                    distillationGenerator.writeToFile(distillationFile,distillation);

                } catch (TransformerConfigurationException tce) {
                    tce.printStackTrace();
                    System.exit(-1);
                } catch (TransformerException te) {
                    te.printStackTrace();
                    System.exit(-1);
                } catch (IOException ioe) {
                    System.err.println("XML Parser failed to read file: "+todayXml);
                    ioe.printStackTrace();
                    System.exit(-1);
                } catch (SAXException saxe) {
                    System.err.println("XML Parser is unable to parse this xml file: "+todayXml);
                    saxe.printStackTrace();
                    System.exit(-1);
                }

            }

        } catch (ParserConfigurationException pce) {
            System.err.println("XML Parser Configuration failed for some reason.");
            pce.printStackTrace();
            System.exit(-1);
        }




    }

}
